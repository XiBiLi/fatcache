TITLE:
Improve the performance of fatcache with asynchronous I/O

AUTHOR:
Xiaobing Li @CloudXane

ABSTRACT:
The most important feature of systems designed for Big Data applications 
is horizontal scalability. And this is also true for distributed caching 
system, which plays a very critical role in today's web services. But 
pure in-memory cache systems, like memcached, are difficult to scale due 
to the high cost and power consumption of DRAM.

Fatcache, a cache system for Big Data, addresses the scalability issue by 
utilizing SSD, which has higher capacity per dollar, lower power consumption 
per byte, as well as comparable read latency to that of network [1, 2].

Currently, fatcache adopts blocking synchronous disk I/O; both SSD read and
write operations are on the critical path to respond requests from users.
But SSD write does not service requests directly, and should be decoupled 
from the critical path to improve system throughput. 

Therefore, as indicated in [1], I am using kernel aio to enhance the 
parallelism among CPU, SSD and network within fatcache. In addition, I 
propose to drain and evict slabs according to the characteristics of 
workload instead of currently assumed FIFO policy.

DETAILS:

RELATED WORKS:

REFERENCE:
[1] https://github.com/twitter/fatcache/.
[2] https://gist.github.com/jboner/2841832.

PERSONAL INFORMATION:
I will graduate as a master student from Auburn University this summer, 
and am looking for jobs on cloud computing and big data in California.
My linkedIn is at http://www.linkedin.com/pub/xiaobing-li/69/a71/319.
